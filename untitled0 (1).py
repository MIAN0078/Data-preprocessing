# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0bKws8Fd9AHfeKwhz8J9iCpiPiF1n5m

# Import Libraries
"""

import pandas as pd
import numpy as np
import re

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""#Load Dataset"""

df = pd.read_csv('/content/Cars Datasets 2025.csv', encoding='latin1')

# Drop rows with any missing values for simplicity
# df.dropna(inplace=True) # This was dropping rows with missing torque before cleaning

# Impute missing values in 'Torque' with the mean
# This will be done after cleaning the torque column

# Display initial info
df.info()

"""#Clean Cars Price"""

# Remove currency symbols and commas from 'Cars Prices'
df['Cars Prices'] = df['Cars Prices'].astype(str).str.replace(r'[\$,€]', '', regex=True)
df['Cars Prices'] = df['Cars Prices'].str.replace(',', '').str.strip()

# Function to handle price ranges like "12000-15000"
def clean_price(x):
    nums = re.findall(r'\d+', str(x))
    if len(nums) == 0:
        return np.nan
    elif len(nums) == 1:
        return int(nums[0])
    else:
        return int(np.mean([int(n) for n in nums]))

df['Cars Prices'] = df['Cars Prices'].apply(clean_price)
df.dropna(subset=['Cars Prices'], inplace=True)
df['Cars Prices'] = df['Cars Prices'].astype(int)

"""#Label Encode Categorical Columns"""

# Encode categorical columns using LabelEncoder
label_cols = ['Company Names', 'Cars Names', 'Engines', 'CC/Battery Capacity', 'Fuel Types']
le = LabelEncoder()

for col in label_cols:
    df[col] = le.fit_transform(df[col])

"""#Clean Seats Column"""

# Function to clean Seats values
def clean_seats(x):
    if isinstance(x, str):
        x = x.replace('\x96', '-')
        if '+' in x:
            return sum(int(p) for p in x.split('+'))
        if '-' in x:
            parts = [int(p) for p in x.split('-')]
            return int(np.mean(parts))
        return int(x)
    return x

df['Seats'] = df['Seats'].apply(clean_seats)

"""#Clean Total Speed and Performance"""

# Clean Total Speed
df['Total Speed'] = df['Total Speed'].apply(lambda x: int(re.findall(r'\d+', str(x))[0]))

# Clean 'Performance(0 - 100 )KM/H'
def clean_performance(x):
    if isinstance(x, str):
        x = x.lower().replace('sec', '').replace(' ', '').replace('/', '-').replace('\x96', '-').strip()
        x = re.sub(r'\(.*\)', '', x)
        if '-' in x:
            parts = [float(p) for p in re.findall(r'\d+\.?\d*', x)]
            return np.mean(parts)
        nums = re.findall(r'\d+\.?\d*', x)
        if len(nums) > 0:
            return float(nums[0])
        else:
            return np.nan
    return x

df['Performance(0 - 100 )KM/H'] = df['Performance(0 - 100 )KM/H'].apply(clean_performance)

"""# Clean Torque Column"""

# Clean 'Torque' values
def clean_torque(x):
    if isinstance(x, str):
        x = x.lower().replace('nm', '').replace('/', '-').strip()
        # Take the first number in a range
        if '-' in x:
            x = x.split('-')[0].strip()
        # Use regex to find the first number in the string
        nums = re.findall(r'\d+\.?\d*', x)
        if len(nums) > 0:
            return float(nums[0])
        else:
            return np.nan
    return x

df['Torque'] = df['Torque'].apply(clean_torque)

"""#: Clean HorsePower Column"""

# Clean HorsePower values
def clean_horsepower(x):
    if isinstance(x, str):
        x = x.lower().replace('hp', '').replace('up to ', '').replace('\x96', '-').replace(' ', '').replace('~', '').replace('/', '-').replace(',', '').strip()
        if '-' in x:
            parts = [int(p) for p in x.split('-')]
            return np.mean(parts)
        # Use regex to find the first number in the string
        nums = re.findall(r'\d+', x)
        if len(nums) > 0:
            return int(nums[0])
        else:
            return np.nan
    return x

df['HorsePower'] = df['HorsePower'].apply(clean_horsepower)

"""#Final Check"""

# Impute missing values in 'Torque' with the mean
df.fillna({'Torque': df['Torque'].mean()}, inplace=True)

# Display cleaned data
display(df.head())

# Confirm data types
df.info()

"""# Top 10 Most Frequent Cars"""

# Get the top 10 most frequent car names
top_10_cars = df['Cars Names'].value_counts().nlargest(10).index

# Display the data for each of the top 10 cars
for car in top_10_cars:
    display(df[df['Cars Names'] == car])

"""# 1. Lamborghini Aventador"""

display(df[df['Cars Names'] == 'AVENTADOR'])

"""## 2. Rolls Royce Phantom"""

display(df[df['Cars Names'] == 'PHANTOM'])

"""## 3. Bugatti Chiron"""

display(df[df['Cars Names'] == 'CHIRON'])

"""## 4. Ferrari F8 Tributo"""

display(df[df['Cars Names'] == 'F8 TRIBUTO'])

"""## 5. Mercedes-Benz S-Class"""

display(df[df['Cars Names'] == 'S-CLASS'])

"""## 6. BMW 7 Series"""

display(df[df['Cars Names'] == '7 SERIES'])

"""## 7. Audi A8"""

display(df[df['Cars Names'] == 'A8'])

"""## 8. Porsche 911"""

display(df[df['Cars Names'] == '911'])

"""## 9. Bentley Continental GT"""

display(df[df['Cars Names'] == 'CONTINENTAL GT'])

"""## 10. Aston Martin DBS"""

display(df[df['Cars Names'] == 'DBS'])

"""#Train and test splitting"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# ✅ Features (input variables)
X = df.drop(['Cars Prices'], axis=1)

# ✅ Target (output variable to predict)
y = df['Cars Prices']

"""#Split the Dataset into Train and Test Sets"""

# Split the data: 80% train, 20% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check the shape of splits
print("Training samples:", X_train.shape[0])
print("Testing samples:", X_test.shape[0])

"""#Train a Linear Regression Model"""

# Initialize the model
model = LinearRegression()

# Impute missing values in 'Torque' with the mean
X_train.fillna({'Torque': X_train['Torque'].mean()}, inplace=True)
X_test.fillna({'Torque': X_test['Torque'].mean()}, inplace=True)

# Impute missing values in 'Performance(0 - 100 )KM/H' with the mean
X_train.fillna({'Performance(0 - 100 )KM/H': X_train['Performance(0 - 100 )KM/H'].mean()}, inplace=True)
X_test.fillna({'Performance(0 - 100 )KM/H': X_test['Performance(0 - 100 )KM/H'].mean()}, inplace=True)


# Train the model on training data
model.fit(X_train, y_train)

"""#prediction of test Data"""

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's performance
# Calculate the Mean Squared Error (MSE), which is the average of the squared differences between the actual and predicted values.
mse = mean_squared_error(y_test, y_pred)
# Calculate the R-squared (R2) score, which represents the proportion of the variance in the dependent variable that is predictable from the independent variable(s).
r2 = r2_score(y_test, y_pred)

# Print the MSE and R2 score
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

"""#Import matplotlib library for predict car price"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs. Predicted Car Prices")
plt.show()

"""#Find the car with best performance"""

# Find the car with the best performance (lowest 0-100 km/h time)
best_performance_car = df.loc[df['Performance(0 - 100 )KM/H'].idxmin()]

print("Car with the best performance:")
print(best_performance_car)

"""# Find the most expensive car"""

most_expensive_car = df.loc[df['Cars Prices'].idxmax()]

print("Most expensive car:")
print(most_expensive_car)

"""# Find the car with the highest horsepower"""

highest_horsepower_car = df.loc[df['HorsePower'].idxmax()]

print("Car with the highest horsepower:")
print(highest_horsepower_car)

"""# Find cars within a specific price range"""

# You can change these values to your desired price range
min_price = 50000
max_price = 100000

cars_in_price_range = df[(df['Cars Prices'] >= min_price) & (df['Cars Prices'] <= max_price)]

print(f"Cars between ${min_price} and ${max_price}:")
display(cars_in_price_range)

"""#Distribution Car price"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.histplot(df['Cars Prices'], bins=50, kde=True)
plt.title('Distribution of Car Prices')
plt.xlabel('Car Price')
plt.ylabel('Frequency')
plt.show()

"""#Find Car feature"""

# Calculate the correlation matrix
corr_matrix = df.corr()

# Set up the matplotlib figure
plt.figure(figsize=(12, 10))

# Generate a heatmap to visualize the correlation matrix
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")

# Add a title to the heatmap
plt.title('Correlation Matrix of Car Features')

# Display the heatmap
plt.show()